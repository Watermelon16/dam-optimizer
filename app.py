"""
·ª®ng d·ª•ng web t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c
s·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs)
"""

import streamlit as st
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
import plotly.graph_objects as go
import os
import time
import base64
from io import BytesIO
import torch
from datetime import datetime

# Import c√°c m√¥-ƒëun t·ª± t·∫°o
from modules.pinns_model import optimize_dam_section, generate_force_diagram, plot_loss_history
from modules.visualization import create_force_diagram, plot_loss_curve, create_excel_report, create_pdf_report
from modules.database import DamDatabase

# Thi·∫øt l·∫≠p trang
st.set_page_config(
    page_title="T√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng",
    page_icon="üèûÔ∏è",
    layout="wide",
    initial_sidebar_state="expanded"
)

# T·∫£i CSS t√πy ch·ªânh
def load_css():
    with open("static/css/style.css", "r") as f:
        st.markdown(f"<style>{f.read()}</style>", unsafe_allow_html=True)

# H√†m t·∫°o file Excel ƒë·ªÉ t·∫£i xu·ªëng
def to_excel(df):
    output = BytesIO()
    with pd.ExcelWriter(output, engine='xlsxwriter') as writer:
        df.to_excel(writer, sheet_name='K·∫øt qu·∫£', index=False)
        workbook = writer.book
        worksheet = writer.sheets['K·∫øt qu·∫£']
        format1 = workbook.add_format({'num_format': '0.00'})
        worksheet.set_column('A:Z', 18, format1)
    processed_data = output.getvalue()
    return processed_data

# H√†m t·∫°o link t·∫£i xu·ªëng
def get_download_link(data, filename, text):
    b64 = base64.b64encode(data).decode()
    href = f'<a href="data:application/octet-stream;base64,{b64}" download="{filename}">{text}</a>'
    return href

# H√†m t·∫°o PDF ƒë·ªÉ t·∫£i xu·ªëng
def get_pdf_download_link(html_content, filename):
    try:
        import pdfkit
        pdf = pdfkit.from_string(html_content, False)
        b64 = base64.b64encode(pdf).decode()
        href = f'<a href="data:application/pdf;base64,{b64}" download="{filename}">T·∫£i xu·ªëng b√°o c√°o PDF</a>'
        return href
    except Exception as e:
        st.error(f"Kh√¥ng th·ªÉ t·∫°o PDF: {e}")
        return None

# Kh·ªüi t·∫°o c∆° s·ªü d·ªØ li·ªáu
@st.cache_resource
def get_database():
    return DamDatabase("data/dam_results.db")

# H√†m ch√≠nh
def main():
    # T·∫£i CSS
    load_css()
    
    # K·∫øt n·ªëi ƒë·∫øn c∆° s·ªü d·ªØ li·ªáu
    db = get_database()
    
    # Thanh ti√™u ƒë·ªÅ
    st.title("C√¥ng c·ª• t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c")
    st.markdown("S·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs)")
    
    # T·∫°o tabs
    tabs = st.tabs(["T√≠nh to√°n", "L√Ω thuy·∫øt", "L·ªãch s·ª≠ t√≠nh to√°n", "Gi·ªõi thi·ªáu"])
    
    # Tab T√≠nh to√°n
    with tabs[0]:
        # Chia layout th√†nh 2 c·ªôt
        col1, col2 = st.columns([1, 2])
        
        with col1:
            st.markdown("### Th√¥ng s·ªë ƒë·∫ßu v√†o")
            
            # Form nh·∫≠p li·ªáu
            with st.form("input_form"):
                H = st.number_input("Chi·ªÅu cao ƒë·∫≠p H (m)", min_value=10.0, max_value=300.0, value=60.0, step=5.0)
                
                st.markdown("#### Th√¥ng s·ªë v·∫≠t li·ªáu v√† n·ªÅn")
                gamma_bt = st.number_input("Tr·ªçng l∆∞·ª£ng ri√™ng b√™ t√¥ng Œ≥_bt (T/m¬≥)", min_value=2.0, max_value=3.0, value=2.4, step=0.1)
                gamma_n = st.number_input("Tr·ªçng l∆∞·ª£ng ri√™ng n∆∞·ªõc Œ≥_n (T/m¬≥)", min_value=0.9, max_value=1.1, value=1.0, step=0.1)
                f = st.number_input("H·ªá s·ªë ma s√°t f", min_value=0.3, max_value=0.9, value=0.7, step=0.05)
                C = st.number_input("C∆∞·ªùng ƒë·ªô kh√°ng c·∫Øt C (T/m¬≤)", min_value=0.0, max_value=10.0, value=0.5, step=0.1)
                
                st.markdown("#### Th√¥ng s·ªë ·ªïn ƒë·ªãnh v√† th·∫•m")
                Kc = st.number_input("H·ªá s·ªë ·ªïn ƒë·ªãnh y√™u c·∫ßu Kc", min_value=1.0, max_value=2.0, value=1.2, step=0.1)
                a1 = st.number_input("H·ªá s·ªë √°p l·ª±c th·∫•m Œ±1", min_value=0.0, max_value=1.0, value=0.6, step=0.1)
                
                st.markdown("#### Th√¥ng s·ªë t√≠nh to√°n")
                epochs = st.slider("S·ªë v√≤ng l·∫∑p t·ªëi ƒëa", min_value=1000, max_value=10000, value=5000, step=1000)
                
                # N√∫t t√≠nh to√°n
                submitted = st.form_submit_button("T√≠nh to√°n t·ªëi ∆∞u")
            
            # Ki·ªÉm tra l·ªãch s·ª≠ t√≠nh to√°n
            existing_results = db.search_results(H=H)
            if not existing_results.empty:
                st.info(f"ƒê√£ c√≥ {len(existing_results)} k·∫øt qu·∫£ t√≠nh to√°n tr∆∞·ªõc ƒë√≥ cho H = {H}m trong c∆° s·ªü d·ªØ li·ªáu.")
                if st.button("Xem k·∫øt qu·∫£ ƒë√£ c√≥"):
                    result_id = existing_results.iloc[0]['id']
                    st.session_state['result'] = db.get_result_by_id(result_id)
                    st.experimental_rerun()
        
        # X·ª≠ l√Ω khi form ƒë∆∞·ª£c g·ª≠i
        if submitted:
            with st.spinner("ƒêang t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p..."):
                # Th·ª±c hi·ªán t√≠nh to√°n
                result = optimize_dam_section(
                    H=H,
                    gamma_bt=gamma_bt,
                    gamma_n=gamma_n,
                    f=f,
                    C=C,
                    Kc=Kc,
                    a1=a1,
                    epochs=epochs,
                    verbose=False
                )
                
                # L∆∞u k·∫øt qu·∫£ v√†o c∆° s·ªü d·ªØ li·ªáu
                db.save_result(result)
                
                # L∆∞u k·∫øt qu·∫£ v√†o session state
                st.session_state['result'] = result
        
        # Hi·ªÉn th·ªã k·∫øt qu·∫£ n·∫øu c√≥
        with col2:
            if 'result' in st.session_state:
                result = st.session_state['result']
                
                st.markdown("### K·∫øt qu·∫£ t√≠nh to√°n")
                
                # Hi·ªÉn th·ªã c√°c tham s·ªë t·ªëi ∆∞u
                col_params1, col_params2 = st.columns(2)
                
                with col_params1:
                    st.metric("H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u (n)", f"{result['n']:.4f}")
                    st.metric("H·ªá s·ªë m√°i h·∫° l∆∞u (m)", f"{result['m']:.4f}")
                    st.metric("Tham s·ªë Œæ", f"{result['xi']:.4f}")
                
                with col_params2:
                    st.metric("Di·ªán t√≠ch m·∫∑t c·∫Øt (A)", f"{result['A']:.4f} m¬≤")
                    st.metric("H·ªá s·ªë ·ªïn ƒë·ªãnh (K)", f"{result['K']:.4f}")
                    st.metric("·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u (œÉ)", f"{result['sigma']:.4f} T/m¬≤")
                
                # Hi·ªÉn th·ªã tr·∫°ng th√°i
                if result['K'] >= result['Kc']:
                    st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.4f} ‚â• Kc = {result['Kc']:.2f})")
                else:
                    st.error(f"M·∫∑t c·∫Øt ƒë·∫≠p KH√îNG th·ªèa m√£n ƒëi·ªÅu ki·ªán ·ªïn ƒë·ªãnh (K = {result['K']:.4f} < Kc = {result['Kc']:.2f})")
                
                if result['sigma'] <= 0:
                    st.success(f"M·∫∑t c·∫Øt ƒë·∫≠p th·ªèa m√£n ƒëi·ªÅu ki·ªán kh√¥ng k√©o (œÉ = {result['sigma']:.4f} T/m¬≤ ‚â§ 0)")
                else:
                    st.warning(f"M·∫∑t c·∫Øt ƒë·∫≠p c√≥ ·ª©ng su·∫•t k√©o ·ªü m√©p th∆∞·ª£ng l∆∞u (œÉ = {result['sigma']:.4f} T/m¬≤ > 0)")
                
                # Hi·ªÉn th·ªã th·ªùi gian t√≠nh to√°n
                st.info(f"Th·ªùi gian t√≠nh to√°n: {result['computation_time']:.2f} gi√¢y")
                
                # T·∫°o tabs cho c√°c bi·ªÉu ƒë·ªì
                result_tabs = st.tabs(["M·∫∑t c·∫Øt ƒë·∫≠p", "Bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t", "Xu·∫•t b√°o c√°o"])
                
                # Tab m·∫∑t c·∫Øt ƒë·∫≠p
                with result_tabs[0]:
                    # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                    fig = create_force_diagram(result, interactive=True)
                    st.plotly_chart(fig, use_container_width=True)
                
                # Tab bi·ªÉu ƒë·ªì h√†m m·∫•t m√°t
                with result_tabs[1]:
                    # T·∫°o bi·ªÉu ƒë·ªì Plotly t∆∞∆°ng t√°c
                    loss_fig = plot_loss_curve(result['loss_history'], interactive=True)
                    st.plotly_chart(loss_fig, use_container_width=True)
                
                # Tab xu·∫•t b√°o c√°o
                with result_tabs[2]:
                    st.markdown("### Xu·∫•t b√°o c√°o")
                    
                    # T·∫°o b√°o c√°o Excel
                    excel_df = create_excel_report(result)
                    excel_data = to_excel(excel_df)
                    st.markdown(
                        get_download_link(excel_data, f"bao_cao_dam_H{int(result['H'])}.xlsx", "T·∫£i xu·ªëng b√°o c√°o Excel"),
                        unsafe_allow_html=True
                    )
                    
                    # T·∫°o b√°o c√°o PDF
                    pdf_html = create_pdf_report(result)
                    
                    # Ki·ªÉm tra xem pdfkit ƒë√£ ƒë∆∞·ª£c c√†i ƒë·∫∑t ch∆∞a
                    try:
                        import pdfkit
                        pdf_link = get_pdf_download_link(pdf_html, f"bao_cao_dam_H{int(result['H'])}.pdf")
                        if pdf_link:
                            st.markdown(pdf_link, unsafe_allow_html=True)
                    except ImportError:
                        st.warning("Th∆∞ vi·ªán pdfkit ch∆∞a ƒë∆∞·ª£c c√†i ƒë·∫∑t. Kh√¥ng th·ªÉ t·∫°o b√°o c√°o PDF.")
                        if st.button("C√†i ƒë·∫∑t pdfkit"):
                            os.system("pip install pdfkit")
                            st.success("ƒê√£ c√†i ƒë·∫∑t pdfkit. Vui l√≤ng kh·ªüi ƒë·ªông l·∫°i ·ª©ng d·ª•ng.")
    
    # Tab L√Ω thuy·∫øt
    with tabs[1]:
        st.markdown("""
        ### L√Ω thuy·∫øt t√≠nh to√°n m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c
        
        #### M√¥ h√¨nh Physics-Informed Neural Networks (PINNs)
        
        Physics-Informed Neural Networks (PINNs) l√† m·ªôt ph∆∞∆°ng ph√°p k·∫øt h·ª£p gi·ªØa m·∫°ng n∆°-ron v√† c√°c r√†ng bu·ªôc v·∫≠t l√Ω ƒë·ªÉ gi·∫£i quy·∫øt c√°c b√†i to√°n khoa h·ªçc v√† k·ªπ thu·∫≠t. Trong ·ª©ng d·ª•ng n√†y, PINNs ƒë∆∞·ª£c s·ª≠ d·ª•ng ƒë·ªÉ t√¨m c√°c tham s·ªë t·ªëi ∆∞u cho m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c.
        
        #### C√°c tham s·ªë t·ªëi ∆∞u
        
        M·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c ƒë∆∞·ª£c m√¥ t·∫£ b·ªüi ba tham s·ªë ch√≠nh:
        
        - **n**: H·ªá s·ªë m√°i th∆∞·ª£ng l∆∞u
        - **m**: H·ªá s·ªë m√°i h·∫° l∆∞u
        - **Œæ (xi)**: Tham s·ªë x√°c ƒë·ªãnh v·ªã tr√≠ ƒëi·ªÉm g√£y kh√∫c tr√™n m√°i th∆∞·ª£ng l∆∞u
        
        #### C√°c ƒëi·ªÅu ki·ªán r√†ng bu·ªôc
        
        M·∫∑t c·∫Øt ƒë·∫≠p ph·∫£i th·ªèa m√£n c√°c ƒëi·ªÅu ki·ªán sau:
        
        1. **ƒêi·ªÅu ki·ªán ·ªïn ƒë·ªãnh tr∆∞·ª£t**: H·ªá s·ªë ·ªïn ƒë·ªãnh K ‚â• Kc
        2. **ƒêi·ªÅu ki·ªán kh√¥ng k√©o**: ·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u œÉ ‚â§ 0
        3. **T·ªëi thi·ªÉu h√≥a di·ªán t√≠ch m·∫∑t c·∫Øt**: Gi·∫£m thi·ªÉu l∆∞·ª£ng b√™ t√¥ng s·ª≠ d·ª•ng
        
        #### C√¥ng th·ª©c t√≠nh to√°n
        
        C√°c c√¥ng th·ª©c ch√≠nh ƒë∆∞·ª£c s·ª≠ d·ª•ng trong t√≠nh to√°n:
        
        - **Di·ªán t√≠ch m·∫∑t c·∫Øt**: A = 0.5 * H¬≤ * (m + n * (1-Œæ)¬≤)
        - **H·ªá s·ªë ·ªïn ƒë·ªãnh**: K = Fct / Fgt
            - Fct = f * (G + W2 - Wt) + C * H * (m + n * (1-Œæ))
            - Fgt = 0.5 * Œ≥_n * H¬≤
        - **·ª®ng su·∫•t m√©p th∆∞·ª£ng l∆∞u**: œÉ = P / B - 6 * M0 / B¬≤
        
        #### Qu√° tr√¨nh t·ªëi ∆∞u h√≥a
        
        1. M·∫°ng n∆°-ron d·ª± ƒëo√°n c√°c tham s·ªë n, m, Œæ
        2. T√≠nh to√°n c√°c ƒë·∫°i l∆∞·ª£ng v·∫≠t l√Ω (A, K, œÉ) d·ª±a tr√™n c√°c tham s·ªë n√†y
        3. T√≠nh to√°n h√†m m·∫•t m√°t d·ª±a tr√™n c√°c r√†ng bu·ªôc v·∫≠t l√Ω
        4. C·∫≠p nh·∫≠t m·∫°ng n∆°-ron ƒë·ªÉ gi·∫£m thi·ªÉu h√†m m·∫•t m√°t
        5. L·∫∑p l·∫°i qu√° tr√¨nh cho ƒë·∫øn khi h·ªôi t·ª•
        
        #### H√†m m·∫•t m√°t
        
        H√†m m·∫•t m√°t bao g·ªìm c√°c th√†nh ph·∫ßn:
        
        1. Ph·∫°t n·∫øu K < Kc (ƒë·∫£m b·∫£o ·ªïn ƒë·ªãnh)
        2. Ph·∫°t n·∫øu œÉ > 0 (ƒë·∫£m b·∫£o kh√¥ng k√©o)
        3. T·ªëi thi·ªÉu h√≥a di·ªán t√≠ch A
        
        #### T√†i li·ªáu tham kh·∫£o
        
        1. Raissi, M., Perdikaris, P., & Karniadakis, G. E. (2019). Physics-informed neural networks: A deep learning framework for solving forward and inverse problems involving nonlinear partial differential equations. Journal of Computational Physics, 378, 686-707.
        
        2. Nguy·ªÖn VƒÉn M·∫°o, ƒê·ªó VƒÉn B√¨nh (2010). T√≠nh to√°n thi·∫øt k·∫ø ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c. NXB X√¢y d·ª±ng, H√† N·ªôi.
        """)
    
    # Tab L·ªãch s·ª≠ t√≠nh to√°n
    with tabs[2]:
        st.markdown("### L·ªãch s·ª≠ t√≠nh to√°n")
        
        # L·∫•y t·∫•t c·∫£ k·∫øt qu·∫£ t·ª´ c∆° s·ªü d·ªØ li·ªáu
        all_results = db.get_all_results()
        
        if all_results.empty:
            st.info("Ch∆∞a c√≥ k·∫øt qu·∫£ t√≠nh to√°n n√†o ƒë∆∞·ª£c l∆∞u trong c∆° s·ªü d·ªØ li·ªáu.")
        else:
            # Hi·ªÉn th·ªã b·∫£ng k·∫øt qu·∫£
            display_df = all_results[['id', 'timestamp', 'H', 'n', 'm', 'xi', 'A', 'K', 'sigma']].copy()
            display_df.columns = ['ID', 'Th·ªùi gian', 'H (m)', 'n', 'm', 'Œæ', 'A (m¬≤)', 'K', 'œÉ (T/m¬≤)']
            
            # Format c√°c c·ªôt s·ªë
            for col in ['n', 'm', 'Œæ', 'A (m¬≤)', 'K', 'œÉ (T/m¬≤)']:
                display_df[col] = display_df[col].round(4)
            
            # Format c·ªôt th·ªùi gian
            display_df['Th·ªùi gian'] = pd.to_datetime(display_df['Th·ªùi gian']).dt.strftime('%d/%m/%Y %H:%M:%S')
            
            st.dataframe(display_df, use_container_width=True)
            
            # Ch·ªçn k·∫øt qu·∫£ ƒë·ªÉ xem chi ti·∫øt
            selected_id = st.selectbox("Ch·ªçn ID ƒë·ªÉ xem chi ti·∫øt:", display_df['ID'].tolist())
            
            if st.button("Xem chi ti·∫øt"):
                result = db.get_result_by_id(selected_id)
                st.session_state['result'] = result
                st.experimental_rerun()
            
            # X√≥a k·∫øt qu·∫£
            if st.button("X√≥a k·∫øt qu·∫£ ƒë√£ ch·ªçn"):
                if db.delete_result(selected_id):
                    st.success(f"ƒê√£ x√≥a k·∫øt qu·∫£ c√≥ ID = {selected_id}")
                    # C·∫≠p nh·∫≠t l·∫°i b·∫£ng
                    st.experimental_rerun()
                else:
                    st.error("Kh√¥ng th·ªÉ x√≥a k·∫øt qu·∫£")
    
    # Tab Gi·ªõi thi·ªáu
    with tabs[3]:
        st.markdown("""
        ### Gi·ªõi thi·ªáu
        
        ·ª®ng d·ª•ng **T√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c** l√† m·ªôt c√¥ng c·ª• chuy√™n nghi·ªáp gi√∫p k·ªπ s∆∞ v√† nh√† thi·∫øt k·∫ø t√¨m ra m·∫∑t c·∫Øt kinh t·∫ø nh·∫•t cho ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c (ph·∫ßn kh√¥ng tr√†n) ƒë·ªìng th·ªùi ƒë·∫£m b·∫£o c√°c y√™u c·∫ßu v·ªÅ ·ªïn ƒë·ªãnh v√† an to√†n.
        
        #### T√≠nh nƒÉng ch√≠nh
        
        - T√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c s·ª≠ d·ª•ng m√¥ h√¨nh Physics-Informed Neural Networks (PINNs)
        - Hi·ªÉn th·ªã tr·ª±c quan k·∫øt qu·∫£ t√≠nh to√°n v·ªõi c√°c bi·ªÉu ƒë·ªì t∆∞∆°ng t√°c
        - L∆∞u tr·ªØ v√† qu·∫£n l√Ω l·ªãch s·ª≠ t√≠nh to√°n
        - Xu·∫•t b√°o c√°o d·∫°ng PDF v√† Excel
        
        #### H∆∞·ªõng d·∫´n s·ª≠ d·ª•ng
        
        1. Nh·∫≠p c√°c th√¥ng s·ªë ƒë·∫ßu v√†o trong tab "T√≠nh to√°n"
        2. Nh·∫•n n√∫t "T√≠nh to√°n t·ªëi ∆∞u" ƒë·ªÉ th·ª±c hi·ªán t√≠nh to√°n
        3. Xem k·∫øt qu·∫£ t√≠nh to√°n v√† c√°c bi·ªÉu ƒë·ªì tr·ª±c quan
        4. Xu·∫•t b√°o c√°o d·∫°ng PDF ho·∫∑c Excel n·∫øu c·∫ßn
        5. Xem l·ªãch s·ª≠ t√≠nh to√°n trong tab "L·ªãch s·ª≠ t√≠nh to√°n"
        
        #### V·ªÅ t√°c gi·∫£
        
        ·ª®ng d·ª•ng n√†y ƒë∆∞·ª£c ph√°t tri·ªÉn b·ªüi nh√≥m nghi√™n c·ª©u v·ªÅ ·ª©ng d·ª•ng tr√≠ tu·ªá nh√¢n t·∫°o trong k·ªπ thu·∫≠t x√¢y d·ª±ng c√¥ng tr√¨nh th·ªßy l·ª£i.
        
        #### Li√™n h·ªá
        
        N·∫øu c√≥ b·∫•t k·ª≥ c√¢u h·ªèi ho·∫∑c g√≥p √Ω n√†o, vui l√≤ng li√™n h·ªá qua email: example@example.com
        """)
    
    # Footer
    st.markdown("""
    <div class="footer">
        <p>¬© 2025 C√¥ng c·ª• t√≠nh to√°n t·ªëi ∆∞u m·∫∑t c·∫Øt ƒë·∫≠p b√™ t√¥ng tr·ªçng l·ª±c | Phi√™n b·∫£n 1.0</p>
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
